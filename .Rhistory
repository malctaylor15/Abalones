mert
X_hat1
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
X_hat1
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(i in 1:N_hat){
mert[i] <- exp(X_hat1[i])
}
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
deb <-0
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(i in 1:N_hat){
mert[i] <- exp(X_hat1[i])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){
Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
deb <- deb+1
}
b_results[i,2] <- mean(Z_k_C_b)
b_results[i,3] <- (E-mean(Z_k_C_b))^2
}
plot(b_results[[1]],b_results[[2]] )
X0 <- 2000
sigma <- 0.17
T_mat <- 1
debugSource('~/Fall 2017 Courses/Advanced Computational Methods/Homework3/Taylor_Malcolm_2b.R', echo=TRUE)
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){
Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
deb <- deb+1
}
b_results[i,2] <- mean(Z_k_C_b)
b_results[i,3] <- (E-mean(Z_k_C_b))^2
}
plot(b_results[[1]],b_results[[2]] )
deb <-0
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
deb <-0
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){
Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
deb <- deb+1
}
b_results[i,2] <- mean(Z_k_C_b)
b_results[i,3] <- (E-mean(Z_k_C_b))^2
}
plot(b_results[[1]],b_results[[2]] )
View(b_results)
summary(b_results)
debug <- data.frame(matrix(0,nrow = numb_b, ncol = 5))
debug <- data.frame(matrix(1,nrow = numb_b, ncol = 5))
debug <- data.frame(matrix(1,nrow = numb_b*K, ncol = 5))
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
i,j = 1
i = 1
j=1
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
debug <- data.frame(matrix(1,nrow = numb_b*K, ncol = 5))
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
plot(b_results[[1]],b_results[[2]] )
summary(b_results)
names(b_results)[c(1,2)] <- c("b", "MSE")
View(b_results)
plot(b_results[[1]],b_results[[2]] )
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
i<- 30
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
View(debug)
debug <- data.frame(matrix(1,nrow = numb_b*K, ncol = 5))
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
# Prepare b data frame
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
names(b_results)[c(1,2)] <- c("b", "MSE")
debug <- data.frame(matrix(1,nrow = numb_b*K, ncol = 5))
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b_vec[i]^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
summary(b_results)
plot(b_results[[1]],b_results[[2]] )
debug <- data.frame(matrix(1,nrow = (numb_b+1)*K, ncol = 5))
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b <- 0.03
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
# Prepare b data frame
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
names(b_results)[c(1,2)] <- c("b", "MSE")
debug <- data.frame(matrix(1,nrow = (numb_b+1)*K, ncol = 5))
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b <- 0.03
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
# Prepare b data frame
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
names(b_results)[c(1,2)] <- c("b", "MSE")
# debug <- data.frame(matrix(1,nrow = (numb_b+1)*K, ncol = 5))
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
# debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
summary(b_results)
plot(b_results[[1]],b_results[[2]] )
min(b_results[[2]])
which(b_results[[1]] == min(b_results[[2]]))
which(b_results[[2]] == min(b_results[[2]]))
opt_b <- which(b_results[[2]] == min(b_results[[2]]))
b_results[opt_b, ]
plot(b_results[[1]],b_results[[2]], type = "l" )
plot(b_results[[1]],b_results[[2]] )
?point
summary(b_results[[2]])
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE" )
?plot
?abline
opt_b <- which(b_results[[2]] == minMSE))
minMSE <-min(b_results[[2]])
opt_b <- which(b_results[[2]] == minMSE))
min_row <- b_results[opt_b, ]
min_row <- b_results[opt_b, ]
View(min_row)
View(min_row)
?points
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE" )
points(min_row[1], minMSE, col = "red", pch =1)
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)" )
points(min_row[1], minMSE, col = "red", pch =1)
?plot
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 5 )
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 3 )
points(min_row[1], minMSE, col = "red", pch =1, lwd = 3)
min_row
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 3 )
points(min_row[1], minMSE, col = "red", pch =1, lwd = 3)
clc
clear
K*numb_b
setwd("C:/Users/board/Desktop/Kaggle/Abalones")
# This file splits the data into the appropriate seperate datasets
data1 <- read.csv("toy_ds.csv")
summary(data1)
# Split into 4 datasets so each one will have a similar number of observations
# Create table to observe frequencies
counts <- data.frame(table(data1$Rings))
counts
# ds1 will have the ring classes with most number of observations
low_samp_ring_rows1 <- which(counts$Freq>266) # select classes with more than 266 observations
ds1 <- data1[data1$Rings %in% low_samp_ring_rows1,]
# Check percentages
prop.table(table(ds1$Rings))
# ds2 will have the ring classes with second most number of observations
low_samp_ring_rows2 <- which(counts$Freq<266 & counts$Freq> 100) # select classes with observations between 266 and 100
ds2 <- data1[data1$Rings %in% low_samp_ring_rows2,]
# Check percentages
prop.table(table(ds2$Rings))
# ds3 will
# ds3 will have the ring classes with second smallest number of observations
low_samp_ring_rows3 <- which(counts$Freq<70 & counts$Freq>20 ) # select classes with observations between 266 and 100
ds3 <- data1[data1$Rings %in% low_samp_ring_rows3,]
# Check percentages
prop.table(table(ds3$Rings))
# ds4 will
# ds4 will have the ring classes with smallest number of observations
low_samp_ring_rows4 <- which(counts$Freq<20 ) # select classes with observations between 266 and 100
ds4 <- data1[data1$Rings %in% low_samp_ring_rows4,]
# Check percentages
prop.table(table(ds4$Rings))
library(DMwR)
library(unbalanced)
ds2$Rings <- as.factor(ds2$Rings)
# Balance dataset
ds2_ed <- ds2[,-ncol(ds2)]
Rings <- ds2$Rings
ds2_under <- ubUnder(X = ds2_ed, Y = Rings)
